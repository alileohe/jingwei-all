package com.taobao.jingwei.core.drc;

import com.taobao.drc.sdk.DRCMessageParser;
import com.taobao.drc.sdk.DRCMessageStream;
import com.taobao.drc.sdk.message.Message;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.CoreConnectionPNames;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 * HTTP operations handler. Currently only support POST request.
 */
public class HttpHandler {

    /* Basic http url not including parameters after ? */
    private final String url;

    /* Post form parameters p1=a&p2=b */
    private final List<NameValuePair> formParams = new ArrayList<NameValuePair>();

    /* Core Java class. */
    private final HttpClient httpClient = new DefaultHttpClient();

    /* Several kinds of types of httpd returned results.*/
    private HttpResponse httpResponse;
    private DRCMessageStream inStream;

    HttpHandler(final String urlString) {
        url = urlString;
    }

    final String getUrl() {
        return url;
    }

    final void addFormParam(final String param, final String value) {
        formParams.add(new BasicNameValuePair(param, value));
    }

    final List<NameValuePair> getFormParams() {
        return formParams;
    }

    public void sendRequest(StringEntity entity, String responseEncoding, int conTimeoutMs, int soTimeoutMs)
            throws ClientProtocolException, IOException, HttpBadResponseException {
        HttpPost method = new HttpPost(url);
        method.getParams().setParameter(
                CoreConnectionPNames.SO_TIMEOUT, soTimeoutMs);
        method.getParams().setParameter
                (CoreConnectionPNames.CONNECTION_TIMEOUT, conTimeoutMs);
        method.setEntity(entity);
        httpResponse = httpClient.execute(method);
        checkResponse(httpResponse, responseEncoding);
    }

    public void sendRequest(String urlEncoding, String responseEncoding, int conTimeoutMs, int soTimeoutMs)
            throws IOException, HttpBadResponseException {
        sendRequest(new UrlEncodedFormEntity(formParams, urlEncoding), responseEncoding, conTimeoutMs, soTimeoutMs);
    }

    /**
     * Get one complete HTTP response.
     */
    HttpResponse recvResponse() {
        return httpResponse;
    }

    /**
     * Get the input stream of the response.
     *
     * @return Input stream
     * @throws java.io.IOException
     * @throws DRCClientException
     */
    DRCMessageStream recvInputStream()
            throws IOException, DRCClientException {

        if (inStream == null) {
            if (httpResponse == null) {
                throw new DRCClientException
                        ("HttpHanlder can not find http response and inputStream.");
            }

            HttpEntity responsedEntity = httpResponse.getEntity();
            if (responsedEntity != null) {
                inStream = new DRCMessageStreamImpl(responsedEntity.getContent());
            }
        }
        return inStream;
    }

    /**
     * Get one complete DRC-P package which is defined and generated by
     * protobuf.
     */
    Message recvDRCPResponse()
            throws IOException, DRCClientException {
        if (inStream == null) {
            if (httpResponse == null) {
                throw new DRCClientException
                        ("HttpHanlder can not find http response and inputStream.");
            }
            HttpEntity responsedEntity = httpResponse.getEntity();
            if (responsedEntity != null) {
                inStream = new DRCMessageStreamImpl(responsedEntity.getContent());
            }
        }
        return DRCMessageParser.getDRCMessage(inStream);
    }

    /**
     * Release occupied resource. No matter stopped normally or exceptions are
     * thrown, close should be called.
     */
    final void close() {
        if (httpClient != null) {
            ClientConnectionManager connectionManager = httpClient.getConnectionManager();
            if (null != connectionManager) {
                connectionManager.shutdown();
            }
        }
    }

    /**
     * Check response code, if not 200 throw exceptions.
     */
    void checkResponse(final HttpResponse response, String responseEncoding)
            throws HttpBadResponseException, IOException {
        int statusCode = response.getStatusLine().getStatusCode();
        if (statusCode != 200) {
            switch (statusCode) {
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 400:
                    InputStream in = response.getEntity().getContent();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(in, responseEncoding));
                    String line;
                    StringBuilder builder = new StringBuilder();
                    while ((line = reader.readLine()) != null) {
                        builder.append(line);
                    }
                    throw new HttpBadResponseException
                            (statusCode, "HTTP response code: " + statusCode + " " + builder.toString());
                case 403:
                    throw new HttpBadResponseException
                            (statusCode, "HTTP response code: " + statusCode + " Forbidden.");
                case 404:
                    throw new HttpBadResponseException
                            (statusCode, "HTTP response code: " + statusCode + " Not Found.");
                case 500:
                    throw new HttpBadResponseException
                            (statusCode, "HTTP response code: " + statusCode + " Internal Error.");
                default:
                    throw new HttpBadResponseException
                            (statusCode, "HTTP response code: " + statusCode + " Unexpected code.");
            }
        }
    }

    static class DRCMessageStreamImpl extends DataInputStream implements DRCMessageStream {

        public DRCMessageStreamImpl(InputStream in) {
            super(in);
        }
    }
}